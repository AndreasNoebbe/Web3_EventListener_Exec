# Import Dependencies
import json
import time
from web3 import Web3
from web3.middleware import geth_poa_middleware

# Read.me
# Change; devWallet, PRIVATE_KEY, contract_address, abi_contract

node_provider = "https://young-withered-bird.bsc.quiknode.pro/497db8d0d8e47b5337bfdbe9211a55f6ab306c17/" #QuickNode
#node_provider = "https://speedy-nodes-nyc.moralis.io/066b8c6489cf93a80fa82f1f/bsc/mainnet" # Moralis Web3

# Establish web3 connection to node:
web3 = Web3(Web3.HTTPProvider(node_provider))
print("Web3 Connection Established: ",web3.isConnected())

# Setup Middleware to an arbitrary layer (Required for Datastructure etc.)
web3.middleware_onion.inject(geth_poa_middleware, layer=0)

# Setup MetaMask & BSC Info:
devWallet = '0xEA81B8b392A87D41d642Dfa3dE078D78Ad22581C'
PRIVATE_KEY = "fdc42881f71a2ffec2e6c3e9ff6ad271b4c4b79c47d0b5dc286e62778560be38"

# CA for the token
contract_address = '0xbEA2F021aaeb1c04f890BBce612F956B3E58fB70' # Remember to use correct CA (with uppercase letters)

# ABI (Application Binary Interface from SC)
abi_contract = json.loads('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"holders","type":"address[]"}],"name":"disperse","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"holders","type":"address[]"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"disperse","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"setDrop","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"uniswapV2Pair","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"uniswapV2Router","outputs":[{"internalType":"contract IUniswapV2Router02","name":"","type":"address"}],"stateMutability":"view","type":"function"}]')

# Create Web3 Contract Object
contract = web3.eth.contract(address=contract_address, abi=abi_contract)

# Some fundamental checks:
print("Dev Wallet: ", devWallet)
print("Contract Address: ", contract_address)
print("Token Name: ", contract.functions.name().call())
print("Token Symbol: ", contract.functions.symbol().call())

# Declare Variables
amount = 2500000000000000

# Create event_filter for "Transfer" from latest block
event_filter = contract.events.Transfer.createFilter(fromBlock='latest')

# Create loop to check for new entries in terms of Transfers
while True:
    event_log = event_filter.get_new_entries()
# v [0]    [0]  ["args"] ["from"]
#    ^      ^      ^        ^
# first  second  first    second
# list    list    dict     dict
    if event_log == []:
        #print("No events detected")
        time.sleep(2)
        exit
    else:
        spender = (event_log[0]["args"]["to"]) # We see that there is only one list from which we extract information from first and second dictionary
        
        # Function Call
        function_call = contract.functions.approve(spender,amount)

        # Get the nonce (Helps against duplicate transactions)
        nonce = web3.eth.getTransactionCount(devWallet)

        # Build Transaction
        transaction = function_call.buildTransaction({'chainId': 56,
                                                        'from': devWallet,
                                                        'nonce': nonce,
                                                        'gasPrice': web3.toWei('10','gwei'),
                                                        'gas': 1000000})
        signed_tx = web3.eth.account.sign_transaction(transaction, private_key=PRIVATE_KEY)
        tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
        web3.eth.wait_for_transaction_receipt(tx_hash)

        # TX HASH:
        print("TX Hash Link: https://bscscan.com/tx/" + web3.toHex(tx_hash))

        # Test if worked
        #print("Allowance: ",contract.functions.allowance(devWallet, spender).call())
        #time.sleep(2)



